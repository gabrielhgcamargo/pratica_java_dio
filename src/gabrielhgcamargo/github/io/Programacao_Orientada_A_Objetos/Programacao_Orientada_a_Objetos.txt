POO - Programação Orientada a Objetos

O que é OO?
A Orientação a Objetos é um paradigma de análise,
projeto e programação de sistmas de software baseado
na composição e interação entre diversas unidades de software
chamadas de objetos.

--------------------------------------------------------------------------------------------

Fundamentos (Os três pilares)

	- Abstração = Processo pelo qual se isolam características de um objeto,
			considerando os que tenham em comum certos grupos de objetos.

	- Reuso = Capacidade de criar novas unidades de código a partir de outras
			já existentes.

	- Encapsulamento = Capacidade de esconder complexidades e proteger dados.

--------------------------------------------------------------------------------------------

Estrutura básica da OO:

- Classe

	É uma estrutura que abstrai um conjunto de objetos com
		características similares. Uma classe define o comportamento
		de seus objetos através de métodos e os estados possíveis
		destes objetos através de atributos. Em outros termos, uma
		classe descreve os serviços providos por seus objetos e quais
		informações eles podem armazenar
	É através da classe que vamos modelar o objeto do mundo real.
	Utilizar nomes significativos.
	Substantivos.

-----------

- Atributo
	
	É o elemento de uma classe responsável por definir sua estrutura de dados.
	O conjunto destes será responsável por representar suas características e
		fará parte dos objetos criados a partir da classe.
	É através dela que caracterizamos o conceito do mundo real para o software.+
	Utilizar nomes significativos.
	Substantivos e adjetivos.
	Tipos adequados.(String, int , etc)
	Contexto deve ser considerado.	

	Diferença Atributo X Variável
	Atributo fica dentro da classe.
	Variável fica dentro do método.

-----------
	
- Metodo

	É uma porção de código (sub-rotina) que é disponibilizada pela classe.
	Este é executado quando é FEITA UMA REQUISIÇÃO A ELE.
	Um método serve para identificar quais serviços, ações, que a classe oferece.
	Eles são responsáveis por definir e realizar um determinado comportamento.
	Utilizar verbos.
	Nomes significativos.	
	Contexto deve ser considerado.

	Visibilidade - Retorno- Nome - Parâmetros

	Métodos especiais: Construtor e Destrutor
	
	Construtor - O que constrói o objeto. 
	Destrutor  - Apaga o objeto.

	 - SOBRECARGA DE método:
	É a capacidade de definir métodos para diferentes contextos, 
	  mas preservando seu nome.
	O que os difere é o conteúdo dentro deles contendo o código do que ele faz;
	E principalmente os parâmetros, que é o fator que os realmente difere.

-----------

Objeto

	Um objeto é a representação de um conceito/entidade do mundo
	real, que pode ser física (bola, carro, árvore etc.) ou conceitual
	(viagem, estoque, compra etc.) e possui um significado bem
	definido para um determinado software. Para esse conceito/entidade, 
	deve ser definida inicialmente uma classe a partir da qual posteriormente serão
	instanciados objetos distintos.

	Classe é o Molde do Objeto, no caso, Objetos são instâncias das classes.

	Exemplos de criação de objetos: 
					- Carro carro = new Carro();
					- Carro carro = new Carro("Honda","Branco");

-----------
Mensagem

	É o processo de ativação de um método de um objeto. Isto ocorre
		quando uma requisição (chamada) a esse método é realizada,
		assim disparando a execução de seu comportamento descrito por
		sua classe. Pode também ser direcionada diretamente à classe,
		caso a requisição seja a um método estático. 

	Exemplo de mensagem de objeto:
					- carro.<método>;
					- carro.setCapacidadeTanque(200);

--------------------------------------------------------------------------------------------


Relações

Conceitos que ajudam a criar entidades a partir de outras entidades:

- Herança
- Associação
- Interface

Explicando-as:

	- Herança: É o relacionamento entre classes em que uma classe chamada
		de subclasse (classe filha, classe derivada) é uma extensão, um
		subtipo, de outra classe chamada de superclasse (classe pai,
		classe mãe, classe base). Devido a isto, a subclasse consegue
		reaproveitar os atributos e métodos dela. Além dos que
		venham a ser herdados, a subclasse pode definir
		seus próprios membros.
		SERVE PARA CRIAR SUB-TIPOS.

		Exemplo de uso:

		class A extends B{...}
		
		Upcast: subir na hierarquia.
			A a = new B();

		Downcast: descendo na hierarquia.   --> não utilizar ao máximo.
			B a = (B)new  A();



Polimorfismo -> "A mesma ação, se comportando diferente"


Sobrescrita -> "A mesma ação, podendo se comportar diferente"

--------------------------------------------//---------------------------------------
	
	- Associação: Possibilita um relacionamento entre classes/objetos, no qual
		estes possam pedir ajuda a outras classes/objetos e representar
		de forma completa o conceito ao qual se destinam. Neste tipo
		de relacionamento, as classes e os objetos interagem entre si
		para atingir seus objetivos.

		Tipos de Associação:

			Estrutural(Atributos):
			- Composição ---> Ex: Dentro de uma classe, um atributo ser outra classe. Como Pessoa ter um atributo de Endereço, que este contem rua,bairro,numero,etc.
					  Onde Endereço depende de Pessoa.
			- Agregação ---> Igual o exemplo de cima, mas Endereço não depende de Pessoa.
					  Digamos que Endereco pertença tambem a classe Empresa, sendo o endereço desta, além da Pessoa.
					  No caso, ela pode existir sem o outro.

			Comportamental(Métodos):
			- Dependência --> Quando alguma classe é passada como argumento.
					  No caso, o método DEPENDE daquela classe para funcionar.


--------------------------------------------//---------------------------------------

	- Interface: Define um contrato que deve ser seguido pela classe que a implementa.
		     Quando uma classe implementa uma interface, ela se compromete a realizar todos os 
		     comportamento que a interface disponibiliza.	
	

		No código:

		interface A{
			...
			    }

		class B implements A{
			...
			    }


--------------------------------------------//--------------------------------------------
--------------------------------------------//--------------------------------------------
--------------------------------------------//--------------------------------------------

Organização da POO

- Pacotes (Pastas e Subpastas que separam classes, conforme suas representatividades e reponsabilidades)

- Visibilidade (Modificador de acesso) 
	
	Pode ser aplicado em classes, atributos e métodos.
	
	Tipos de visibilidade:	- Private => Só dentro da classe é visível.
				- Protected => Dentro da classe, mesmo pacote e sub-classes.
				- Public => Em qualquer lugar do Programa.
	
	Lembrar do ENCAPSULAMENTO: atributos privados. Utilizar Getters and Setters se necessário.
				   métodos públicos para o funcionamento total da aplicação.